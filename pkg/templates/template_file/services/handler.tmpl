{{- $basePackage := index .Extra 0 -}}
{{- $project := .ProjectName -}}
// auto-generate by `gen` don't edit

package services
import (
	"context"
	"net/http"
	
    "github.com/gorilla/mux"
    transportHttp "github.com/lmfuture-ma/lmaker/transport/http"

	"{{ $basePackage }}/dto"
)

type handlers struct {
    {{- range $serviceIndex, $service := .File.Service }}
          {{- range $index, $method := $service.Method }}
     {{ $method.Name}}  transportHttp.Handler
          {{- end }}
    {{- end }}
}

func MakeHandler(service {{ firstUpperCase $project}}Service,e *mux.Router) *mux.Router {
	handlers := registerHandler(service)
	   {{- range $serviceIndex, $service := .File.Service }}
              {{- range $index, $method := $service.Method -}}
                {{- range $routeIndex, $route := $method.HTTPRoutes }}
    e.Handle("{{ $route.Path }}",transportHttp.NewHttpServer(Decode{{$method.Name}}Req,handlers.{{ $method.Name}})).Methods({{$route.HTTPMethod}})
                {{- end }}
              {{- end -}}
        {{- end }}
	return e
}

func registerHandler(s {{ firstUpperCase $project}}Service) handlers {
	var handler handlers
	   {{- range $serviceIndex, $service := .File.Service }}
              {{- range $index, $method := $service.Method }}
    handler.{{$method.Name}} = Make{{$method.Name}}Endpoint(s)
              {{- end }}
        {{- end }}
	return handler
}

{{- range $serviceIndex, $service := .File.Service -}}
     {{- range $index, $method := $service.Method }}
func Make{{$method.Name}}Endpoint(s {{ firstUpperCase $project}}Service) transportHttp.Handler{
	return func(ctx context.Context, structReq interface{}) (interface{}, error ) {
        {{- if eq $method.InputType  "" }}
        {{ range $j,$result := $method.Results -}} {{$result.Name}}, {{- end }}err := s.{{$method.Name}}(ctx)
         {{- else }}
        req := structReq.(*{{$method.InputType}})
        {{ range $j,$result := $method.Results -}} {{$result.Name}}, {{- end -}}err := s.{{$method.Name}}(ctx
        {{- range $i,$param := $method.Params -}}, req.{{ firstUpperCase $param.Name}} {{- end -}})
        {{- end }}
		var rs *{{$method.OutputType}}
		if err != nil {
			rs = &{{$method.OutputType}}{}
		}else {
			rs = &{{$method.OutputType}}{ {{- range $j,$result := $method.Results -}}{{firstUpperCase $result.Name}}: {{  $result.Name}}, {{- end -}} }
		}
		return rs, err
	}
}

func Decode{{$method.Name}}Req(ctx context.Context, r *http.Request) (interface{},error) {
  {{- if eq $method.InputType  "" }}
     return nil, nil
   {{- else -}}
     req := new({{$method.InputType}})
     // Order will be: URL parameters < query params < form data < JSON body
     // DEPRECATED: it is recommended to set 'http-parameter-priority: url' in grabkit.yaml
     if err := transportHttp.DecodeMuxVars(r, req); err != nil {
     	return req, err
     }
     if err := transportHttp.DecodePostForm(r, req); err != nil {
     	return req, err
     }

     if !transportHttp.IsFormRequest(r) {
     	if err := json.NewDecoder(r.Body).Decode(req); err != nil && err != io.EOF {
     		return req, err
     	}
     }
     return req, nil
   {{- end -}}
}
      {{- end }}
{{- end }}